/*
То же самое, но с попыткой установить блокировку, и, если секция уже заблокирована, 
с печатью ожидающими потоками с интервалом в 1 секунду сообщения о том, 
что секция блокирована. Использовать функцию omp_test_lock.
*/

#include <stdio.h>
#include <omp.h> // Подключаем библиотеку OpenMP
#include <iostream>
#include <windows.h> // Для Windows: функция Sleep()
void sleep(int seconds) {
    Sleep(1000 * seconds); // Преобразуем секунды в миллисекунды
}

omp_lock_t lock; // Глобальная переменная для блокировки

int main(int argc, char* argv[])
{
    setlocale(LC_ALL, "Rus");

    int n; // Переменная для хранения номера потока

    // Инициализируем блокировку
    omp_init_lock(&lock);

    // Создаем параллельную область с 4 потоками
#pragma omp parallel num_threads(4) private(n)
    {
        n = omp_get_thread_num(); // Получаем номер текущего потока

        // Пытаемся установить блокировку
        while (!omp_test_lock(&lock))
        {
            // Если блокировка не установлена, выводим сообщение об ожидании
            printf("Секция закрыта, поток %d\n", n);
            sleep(1); // Ждем 1 секунду перед следующей попыткой
        }

        // Блокировка успешно установлена
        printf("Начало закрытой секции, поток %d\n", n);

        // Имитация выполнения работы в закрытой секции
        sleep(2 + 3 * ((n + 1) % 2)); // Разное время выполнения для разных потоков

        // Выводим сообщение о завершении работы в закрытой секции
        printf("Конец закрытой секции, поток %d\n", n);

        // Снимаем блокировку
        omp_unset_lock(&lock);
    }

    // Уничтожаем блокировку после завершения работы
    omp_destroy_lock(&lock);

    return 0;
}

/*
Начало закрытой секции, поток 0
Секция закрыта, поток 1
Секция закрыта, поток 2
Секция закрыта, поток 3
Секция закрыта, поток 3
Секция закрыта, поток 2
Секция закрыта, поток 1
Секция закрыта, поток 1
Секция закрыта, поток 2
Секция закрыта, поток 3
Секция закрыта, поток 3
Секция закрыта, поток 2
Секция закрыта, поток 1
Секция закрыта, поток 3
Секция закрыта, поток 2
Секция закрыта, поток 1
Конец закрытой секции, поток 0
Начало закрытой секции, поток 2
Секция закрыта, поток 3
Секция закрыта, поток 1
Секция закрыта, поток 3
Секция закрыта, поток 1
Секция закрыта, поток 1
Секция закрыта, поток 3
Секция закрыта, поток 1
Секция закрыта, поток 3
Секция закрыта, поток 1
Секция закрыта, поток 3
Конец закрытой секции, поток 2
Начало закрытой секции, поток 3
Секция закрыта, поток 1
Секция закрыта, поток 1
Конец закрытой секции, поток 3
Начало закрытой секции, поток 1
Конец закрытой секции, поток 1
*/
