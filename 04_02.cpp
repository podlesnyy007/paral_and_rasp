/*
При помощи опции ordered и директивы omp ordered внутри параллельного цикла гарантировать 
выполнения операций в том порядке, как они выполнялись бы в последовательном цикле.
*/

#include <stdio.h>
#include <omp.h> // Подключаем библиотеку OpenMP
#include <iostream>

#define NNN 12 // Количество итераций цикла

int main(int argc, char* argv[])
{
    // Устанавливаем локаль для корректного отображения русских символов в консоли
    setlocale(LC_ALL, "Rus");

    int i, n; // Переменные для итерации и номера потока

    // Создаем параллельную область
#pragma omp parallel private(i, n)
    {
        n = omp_get_thread_num(); // Получаем номер текущего потока

        // Параллельный цикл с опцией ordered
#pragma omp for ordered
        for (i = 0; i < NNN; i++)
        {
            // Блок ordered гарантирует выполнение операций в порядке итераций последовательного цикла
#pragma omp ordered
            {
                printf("Поток %d, итерация %d\n", n, i);
            }
        }
    }

    return 0;
}

/*
Поток 0, итерация 0
Поток 0, итерация 1
Поток 1, итерация 2
Поток 1, итерация 3
Поток 2, итерация 4
Поток 2, итерация 5
Поток 3, итерация 6
Поток 3, итерация 7
Поток 4, итерация 8
Поток 5, итерация 9
Поток 6, итерация 10
Поток 7, итерация 11
*/
