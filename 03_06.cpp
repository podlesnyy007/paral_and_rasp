/*
Разработать программу, иллюстрирующую возможность реализации конечного (неитеративного) параллелизма при помощи
директив omp sections и omp section
*/

#include <stdio.h>
#include <omp.h> // Подключаем библиотеку OpenMP
#include <iostream>

int main(int argc, char* argv[])
{
    setlocale(LC_ALL, "Rus");

    int n; // Переменная для хранения номера потока

    // Создаем параллельную область с 3 потоками
#pragma omp parallel num_threads(3) private(n)
    {
        n = omp_get_thread_num(); // Получаем номер текущего потока

        // Директива sections разделяет работу между секциями
#pragma omp sections
        {
            // Каждая секция выполняется только одним потоком
#pragma omp section
            {
                printf("Первая секция, поток %d\n", n);
            }

#pragma omp section
            {
                printf("Вторая секция, поток %d\n", n);
            }

#pragma omp section
            {
                printf("Третья секция, поток %d\n", n);
            }

#pragma omp section
            {
                printf("Четвертая секция, поток %d\n", n);
            }

#pragma omp section
            {
                printf("Пятая секция, поток %d\n", n);
            }
        } // Конец директивы sections

        // Этот код выполняется всеми потоками после завершения секций
        printf("Параллельная область, поток %d\n", n);
    } // Конец директивы parallel

    return 0;
}

/*
Первая секция, поток 0
Вторая секция, поток 1
Третья секция, поток 2
Четвертая секция, поток 0
Пятая секция, поток 1
Параллельная область, поток 0
Параллельная область, поток 1
Параллельная область, поток 2
*/
