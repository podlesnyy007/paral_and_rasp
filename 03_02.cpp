/*
Проиллюстрировать возможность инициализации локальных переменных, 
объявленных как threadprivate, начальным значением одноименной глобальной переменной 
из главного потока, при помощи опции copyin
*/

#include <stdio.h>
#include <omp.h> // Подключаем библиотеку OpenMP
#include <iostream>

// Объявляем глобальную переменную n как threadprivate
int n;
#pragma omp threadprivate(n)

int main(int argc, char* argv[])
{
    setlocale(LC_ALL, "Rus");

    n = 1;

    // Выводим значение переменной n в главном потоке до входа в параллельную область
    printf("Значение n в главном потоке (до параллельной области): %d\n", n);

    // Создаем параллельную область с 4 потоками
#pragma omp parallel num_threads(4) copyin(n)
    {
        // Каждый поток получает свою локальную копию переменной n,
        // инициализированную значением переменной n из главного потока
        printf("Значение n в потоке %d: %d\n", omp_get_thread_num(), n);
    }

    // Выводим значение переменной n в главном потоке после выхода из параллельной области
    printf("Значение n в главном потоке (после параллельной области): %d\n", n);

    return 0;
}

/*
Значение n в главном потоке (до параллельной области): 1
Значение n в потоке 0: 1
Значение n в потоке 1: 1
Значение n в потоке 2: 1
Значение n в потоке 3: 1
Значение n в главном потоке (после параллельной области): 1
*/
