/*
При помощи операции редукции определить фактическое число порожденных потоков OpenMP
*/

#include <iostream>
#include <stdio.h>
#include <omp.h> // Подключаем библиотеку OpenMP

int main(int argc, char* argv[])
{
    setlocale(LC_ALL, "Rus");

    int count = 0; // Инициализируем переменную для подсчета числа потоков

    // Директива OpenMP для создания параллельной области
#pragma omp parallel reduction(+: count) // Используем операцию редукции для безопасного увеличения счетчика
    {
        count++; // Увеличиваем счетчик в каждом потоке

        // Выводим текущее значение счетчика из каждого потока
        printf("Поток %d: Текущее значение счетчика: %d\n", omp_get_thread_num(), count);
    }

    // После завершения параллельной области выводим общее число потоков
    printf("Общее число порожденных потоков: %d\n", count);

    return 0;
}

/*
Поток 0: Текущее значение счетчика: 1
Поток 1: Текущее значение счетчика: 1
Поток 2: Текущее значение счетчика: 1
Поток 3: Текущее значение счетчика: 1
Общее число порожденных потоков: 4
*/

/*
Операция редукции (или просто редукция ) — это механизм в параллельном программировании, 
который позволяет безопасно выполнять агрегирующие операции (например, сложение, умножение, 
нахождение минимума или максимума) над общей переменной в многопоточной среде.
Редукция используется для того, чтобы избежать гонок данных (data races), которые возникают, 
когда несколько потоков одновременно пытаются изменить одну и ту же переменную.

Поток (thread) — это наименьшая единица выполнения программы, которая может быть запланирована операционной системой.
Когда программа запускается, она обычно начинает выполнение с одного потока, который называется главным потоком (main thread).
Этот поток может создавать дополнительные потоки для выполнения задач параллельно.
*/
