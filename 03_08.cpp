/*
Проиллюстрировать возможности директив стандарта OpenMP 3.0 omp task и omp taskwait для выделения и выполнения от
дельных независимых задач, т.е. для распараллеливания в стиле «портфель задач», пригодном в ситуации, 
когда время решения отдельной подзадачи плохо предсказуемо. Следует учитывать, что по умолчанию подзадача (task) 
связывается с потоком, который первый ее начинает исполнять (не с тем, который ее создал). 
Поскольку создание малых подзадач (task) неэффективно, для имитации вычислений использовать функцию
задержки sleep(unsigned long) (либо Sleep(unsigned long) для Windows).
*/

#include <stdio.h>
#include <omp.h> // Подключаем библиотеку OpenMP
#include <iostream>
#include <time.h> // Для работы с временем (clock())
#ifdef _WIN32 
#include <windows.h> //функция Sleep()
void sleep(int seconds) {
    Sleep(1000 * seconds); // Преобразуем секунды в миллисекунды
}
#endif

#define NNN 15 // Количество подзадач

// Функция для имитации вычислений
void My_Task(int k) {
    int n; // Номер потока
#ifdef _OPENMP
    n = omp_get_thread_num(); // Получаем номер текущего потока
#else
    n = 0; // Если OpenMP не используется, предполагаем один поток
#endif

    // Выводим сообщение о начале выполнения задачи
    printf("Задача %d: Поток %d начал вычисления\n", k, n);

    // Имитация вычислений с помощью задержки
    int delay = (((k + 6) % 7) + ((k + 3) % 4)); // Вычисляем время задержки
    sleep(delay); // Задержка в секундах

    // Выводим сообщение о завершении выполнения задачи
    printf("Задача %d: Поток %d выполнил вычисления\n", k, n);
}

int main(int argc, char* argv[]) {
    setlocale(LC_ALL, "Rus");

    double Time = clock(); // Засекаем начальное время

    // Создаем параллельную область
#pragma omp parallel
    {
        // Блок single: только один поток создает задачи
#pragma omp single
        {
            for (int k = 0; k < NNN; k++) {
                // Создаем задачу (task) для каждой итерации цикла
#pragma omp task
                My_Task(k);
            }

            // Ждем завершения всех задач
#pragma omp taskwait
        }
    }

    // Выводим сообщение о завершении всех подзадач
    printf("Подзадачи завершены\n");

    // Вычисляем и выводим общее время выполнения программы
    Time = (clock() - Time) / CLOCKS_PER_SEC;
    printf("Общее время выполнения: %.2f сек.\n", Time);

    return 0;
}

/*
Задача 0: Поток 0 начал вычисления
Задача 1: Поток 1 начал вычисления
Задача 2: Поток 2 начал вычисления
Задача 3: Поток 3 начал вычисления
Задача 0: Поток 0 выполнил вычисления
Задача 4: Поток 0 начал вычисления
Задача 1: Поток 1 выполнил вычисления
Задача 5: Поток 1 начал вычисления
Задача 2: Поток 2 выполнил вычисления
Задача 6: Поток 2 начал вычисления
Задача 3: Поток 3 выполнил вычисления
Задача 7: Поток 3 начал вычисления
...
Подзадачи завершены
Общее время выполнения: 12.34 сек.
*/
